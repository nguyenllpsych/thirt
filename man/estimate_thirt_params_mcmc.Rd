% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimation.R
\name{estimate_thirt_params_mcmc}
\alias{estimate_thirt_params_mcmc}
\title{Estimate parameters with MCMC}
\usage{
estimate_thirt_params_mcmc(
  resp,
  items,
  control = list(),
  initial_params = list(),
  fixed_params = list()
)
}
\arguments{
\item{resp}{a data.frame of length \verb{[n_person x n_block]} with at least three first variables:
variable \code{person} of the format \code{p} for person number \code{p},
variable \code{block} of the format \code{b} for block number \code{b},
variable \code{resp} of the format \code{r} for response number \code{r}
which corresponds to mupp::find_permutation_index().}

\item{items}{a data.frame of length \verb{[total items]} with five variables:
variable \code{item} of the format \code{i} for item number \code{i},
variable \code{block} of the format \code{b} for block number \code{b},
variable \code{dim} of the format \code{d} for dimension number \code{d},
variable \code{key} with -1 for negatively- and 1 for positively-keyed items.}

\item{control}{a list of three parameters to control the MCMC algorithm:
\code{n_iter} for the number of iterations,
\code{n_burnin} for the number of burn-ins,
\code{step_size_sd} for the step size of new parameter generation.}

\item{initial_params}{a list of initial parameters to start the algorithm,
each parameter needs to be a matrix.}

\item{fixed_params}{a list of fixed parameters to be excluded from estimation,
each parameter needs to be a matrix.}
}
\value{
a list of three objects:
\code{all_iters} is a list of length \verb{[n_iter]} for parameter estimates for all iterations,
\code{mean_mcmc} is a list of length 4 for mean of four parameters after burn-ins,
\code{sd_mcmc} is a list of length 4 for SD of four parameters after burn-ins.
}
\description{
Estimate parameters with MCMC
}
\examples{
\dontrun{
set.seed(202108)

# designs
n_person      <- 100
n_item        <- 4
n_neg         <- 2
n_block       <- 4
n_dim         <- 4
n_iter        <- 5000
n_burnin      <- 200
step_size_sd  <- 0.1

# simulate parameters
params <- simulate_thirt_params(n_person = n_person,
                                n_item   = n_item,
                                n_neg    = n_neg,
                                n_block  = n_block,
                                n_dim    = n_dim)
resp   <- do.call(simulate_thirt_resp, params)
gamma  <- params$gamma$gamma
lambda <- params$items$lambda
psisq  <- params$items$psisq
theta  <- params$persons[, -1]

# estimation output
start_mcmc <- Sys.time()
output     <- estimate_thirt_params_mcmc(resp  = resp$resp,
                                         items = resp$items,
                                         control = list(n_iter   = n_iter,
                                                        n_burnin = n_burnin,
                                                        step_size_sd = step_size_sd),
                                         fixed_params = list(psisq = matrix(psisq))
)
end_mcmc   <- Sys.time()
#'
# correlate estimated and true parameters
diag(cor(theta, output$mean_mcmc$theta))
cor(gamma, output$mean_mcmc$gamma)
cor(lambda, output$mean_mcmc$lambda)
cor(psisq, output$mean_mcmc$psisq)
(time_mcmc <- end_mcmc - start_mcmc)
}

}
